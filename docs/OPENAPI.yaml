openapi: 3.0.3
info:
  title: Evently (Utsavam) API
  version: 1.0.0
servers:
  - url: http://localhost:8000
paths:
  /health:
    get:
      summary: Healthcheck
      responses:
        '200':
          description: OK
  /users:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Email already registered
  /events:
    get:
      summary: List events
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: upcoming_only
          schema: { type: boolean, default: true }
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{event_id}:
    get:
      summary: Get event by id
      parameters:
        - in: path
          name: event_id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Not found
  /users/{user_id}/bookings:
    get:
      summary: User booking history
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
  /bookings:
    post:
      summary: Create booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreateResponse'
        '404': { description: User or event not found }
        '409': { description: Not enough seats }
  /bookings/{booking_id}:
    delete:
      summary: Cancel booking
      parameters:
        - in: path
          name: booking_id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCancelResponse'
  /admin/users:
    get:
      summary: List users
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401': { description: Unauthorized }
  /admin/events:
    post:
      summary: Create event
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401': { description: Unauthorized }
  /admin/events/{event_id}:
    put:
      summary: Update event
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
        - in: path
          name: event_id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUpdate'
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Event' } } } }
        '400': { description: Invalid capacity reduction }
        '401': { description: Unauthorized }
        '404': { description: Not found }
  /admin/events/{event_id}/bookings:
    get:
      summary: Admin list event bookings
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
        - in: path
          name: event_id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminEventBooking'
  /admin/analytics:
    get:
      summary: Analytics overview
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Analytics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_confirmed_bookings:
                    type: integer
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventAnalytics'
  /admin/seed_demo_data:
    post:
      summary: Seed demo data
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
      responses:
        '201': { description: Seeded }
  /admin/events/{event_id}:
    delete:
      summary: Delete event
      parameters:
        - in: header
          name: X-Admin-Key
          required: true
          schema: { type: string }
        - in: path
          name: event_id
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Deleted }
        '404': { description: Not found }
components:
  schemas:
    UserCreate:
      type: object
      required: [email]
      properties:
        email: { type: string, format: email }
        name: { type: string, nullable: true }
    User:
      type: object
      properties:
        id: { type: integer }
        email: { type: string, format: email }
        name: { type: string, nullable: true }
        created_at: { type: string, format: date-time }
    Event:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        venue: { type: string, nullable: true }
        start_at: { type: string, format: date-time }
        capacity: { type: integer }
        seats_available: { type: integer }
    EventCreate:
      type: object
      required: [name, start_at, capacity]
      properties:
        name: { type: string }
        venue: { type: string, nullable: true }
        start_at: { type: string, format: date-time }
        capacity: { type: integer, minimum: 0 }
    EventUpdate:
      type: object
      properties:
        name: { type: string }
        venue: { type: string }
        start_at: { type: string, format: date-time }
        capacity: { type: integer, minimum: 0 }
    Booking:
      type: object
      properties:
        id: { type: integer }
        event_id: { type: integer }
        seats: { type: integer }
        status: { type: string, enum: [CONFIRMED, CANCELLED] }
        created_at: { type: string, format: date-time }
    BookingRequest:
      type: object
      required: [user_id, event_id]
      properties:
        user_id: { type: integer }
        event_id: { type: integer }
        seats: { type: integer, default: 1, minimum: 1 }
        idempotency_key: { type: string }
    BookingCreateResponse:
      type: object
      properties:
        booking_id: { type: integer }
        status: { type: string }
        user_id: { type: integer }
        event_id: { type: integer }
        seats: { type: integer }
    BookingCancelResponse:
      type: object
      properties:
        booking_id: { type: integer }
        status: { type: string }
    AdminEventBooking:
      type: object
      properties:
        booking_id: { type: integer }
        user_id: { type: integer }
        user_email: { type: string }
        user_name: { type: string }
        seats: { type: integer }
        status: { type: string }
        created_at: { type: string, format: date-time }
    EventAnalytics:
      type: object
      properties:
        event_id: { type: integer }
        name: { type: string }
        total_confirmed_bookings: { type: integer }
        capacity: { type: integer }
        seats_available: { type: integer }
        capacity_utilization_pct: { type: number, format: float }
